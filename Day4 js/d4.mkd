# Day 4: Functions and Scope

## Topics Covered Today

### **1. Scope in JavaScript**
Scope determines where variables and functions are accessible in your code. 

#### **1.1 Global Scope**
- Variables declared outside of functions are globally accessible.
- Example:
  ```javascript
  let globalVar = "I am global!";
  console.log(globalVar); // Accessible globally
  ```

#### **1.2 Local Scope (Function Scope)**
- Variables declared inside a function are only accessible within that function.
- Example:
  ```javascript
  function localScopeExample() {
    let localVar = "I am local!";
    console.log(localVar);
  }
  localScopeExample();
  // console.log(localVar); // Error: localVar is not defined
  ```

#### **1.3 Block Scope**
- Variables declared with `let` or `const` inside a block `{}` are accessible only within that block.
- Example:
  ```javascript
  if (true) {
    let blockScoped = "I am block-scoped!";
    console.log(blockScoped); // Accessible inside block
  }
  // console.log(blockScoped); // Error: blockScoped is not defined
  ```

#### **Key Concepts in Scope:**
- **Shadowing:** Local variables can shadow global variables within their scope.
- **Lexical Scope:** Functions can access variables from their outer scope.

---

### **2. Functions in JavaScript**
Functions are reusable blocks of code designed to perform a specific task.

#### **2.1 Function Declaration**
- Example:
  ```javascript
  function greet(name) {
    return `Hello, ${name}!`;
  }
  console.log(greet("Alice"));
  ```

#### **2.2 Function Expression**
- Example:
  ```javascript
  const add = function (a, b) {
    return a + b;
  };
  console.log(add(3, 4));
  ```

#### **2.3 Arrow Functions**
- Example:
  ```javascript
  const multiply = (a, b) => a * b;
  console.log(multiply(2, 3));
  ```

#### **2.4 Parameters and Arguments**
- Parameters are variables in the function definition; arguments are the values passed during a function call.
- Example:
  ```javascript
  function calculateArea(length, width) {
    return length * width;
  }
  console.log(calculateArea(5, 10));
  ```

#### **2.5 Return Statement**
- Sends a value back to the caller.
- Example:
  ```javascript
  function square(number) {
    return number * number;
  }
  console.log(square(4));
  ```

---

### **3. Practice Problems Solved**

#### **3.1 Check Palindrome**
Function to check if a string is a palindrome:
```javascript
function isPalindrome(str) {
  const normalizedStr = str.toLowerCase().replace(/[^a-z0-9]/g, "");
  const reversedStr = normalizedStr.split("").reverse().join("");
  return normalizedStr === reversedStr;
}

console.log(isPalindrome("madam")); // true
console.log(isPalindrome("hello")); // false
console.log(isPalindrome("A man, a plan, a canal, Panama")); // true
```

---

## Key Takeaways
1. **Scope:**
   - Understand the difference between global, local, and block scope.
   - Practice shadowing and lexical scoping concepts.

2. **Functions:**
   - Learn different ways to declare functions (declaration, expression, arrow).
   - Work with parameters, arguments, and the `return` statement.

3. **Practical Application:**
   - Solved real-world problems like checking for palindromes.

---

See you tomorrow for **Day 5: Arrays and Iteration**! ðŸš€
