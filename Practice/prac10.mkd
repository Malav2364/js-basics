# Day 10: Advanced Promises and Async/Await

## Overview
Today, we deep-dived into **Promises**, **async/await**, and handling **multiple asynchronous operations**. This guide summarizes key concepts, challenges, and best practices.

---

## 1. Understanding Promises

A **Promise** represents a future asynchronous operation that can either:
- **Resolve** (success) ✅
- **Reject** (failure) ❌

### Example:
```javascript
const myPromise = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve("Promise resolved successfully!");
  }, 2000);
});

myPromise
  .then(result => console.log(result))
  .catch(error => console.error(error));
